grep -R ""|grep -E "([0-9]+\.){3}([0-9]+)"

usr/share/udhcpc/default.script:	echo "udhcpc: ifconfig $interface $ip netmask ${subnet:-255.255.255.0} broadcast ${broadcast:-+}"
usr/share/udhcpc/default.script:	ifconfig $interface $ip netmask ${subnet:-255.255.255.0} broadcast ${broadcast:-+}
usr/share/udhcpc/default.script:	[ -n "$router" ] && [ "$router" != "0.0.0.0" ] && [ "$router" != "255.255.255.255" ] && {
usr/share/udhcpc/default.script:			/^0.0.0.0\W{9}('$valid_gw')\W/ {next}
usr/share/udhcpc/default.script:			/^0.0.0.0/ {print "route del -net "$1" gw "$2";"}
usr/share/udhcpc/default.script:		ifconfig "$interface" 0.0.0.0
usr/lib/node_modules/npm/node_modules/request/node_modules/tough-cookie/lib/cookie.js:        /* RFC6265 S5.1.1.5:
usr/lib/node_modules/npm/node_modules/request/node_modules/tough-cookie/lib/cookie.js:        /* RFC6265 S5.1.1.5:
usr/lib/node_modules/npm/node_modules/request/node_modules/tough-cookie/lib/cookie.js:  str = str.trim().replace(/^\./,''); // S4.1.2.3 & S5.2.3: ignore leading .
usr/lib/node_modules/npm/node_modules/request/node_modules/tough-cookie/lib/cookie.js:      return false; // S4.1.2.3 suggests that this is bad. domainMatch() tests confirm this
usr/lib/node_modules/npm/node_modules/request/node_modules/tough-cookie/lib/cookie.js:  /* RFC6265 S4.1.2.2 If a cookie has both the Max-Age and the Expires
usr/lib/node_modules/npm/node_modules/request/node_modules/hawk/example/usage.js:Http.createServer(handler).listen(8000, '127.0.0.1');
usr/lib/node_modules/npm/node_modules/request/node_modules/hawk/example/usage.js:Request('http://127.0.0.1:8000/resource/1?b=1&a=2', function (error, response, body) {
usr/lib/node_modules/npm/node_modules/request/node_modules/hawk/example/usage.js:    var header = Hawk.client.header('http://127.0.0.1:8000/resource/1?b=1&a=2', 'GET', { credentials: credentials, ext: 'and welcome!' });
usr/lib/node_modules/npm/node_modules/request/node_modules/hawk/example/usage.js:        uri: 'http://127.0.0.1:8000/resource/1?b=1&a=2',
usr/lib/node_modules/npm/node_modules/request/node_modules/node-uuid/uuid.js:    // Per 4.2.1.2, use count of uuid's generated during the current clock
usr/lib/node_modules/npm/node_modules/request/node_modules/node-uuid/uuid.js:    // Per 4.2.1.2, Bump clockseq on clock regression
usr/lib/node_modules/npm/node_modules/request/node_modules/node-uuid/uuid.js:    // Per 4.2.1.2 Throw error if too many uuids are requested
usr/lib/node_modules/npm/node_modules/request/node_modules/node-uuid/README.md:  * `nsecs` - (Number between 0-9999) additional time, in 100-nanosecond units. Ignored if `msecs` is unspecified. Default: internal uuid counter is used, as per 4.2.1.2.
usr/lib/node_modules/npm/node_modules/request/node_modules/oauth-sign/index.js:  // http://tools.ietf.org/html/rfc5849#section-3.4.1.3.2
usr/lib/node_modules/npm/node_modules/request/node_modules/http-signature/node_modules/ctype/ctio.js: * 15.7.4.2-Number.prototype.toString (radix):
usr/lib/node_modules/npm/node_modules/request/node_modules/http-signature/node_modules/asn1/tst/ber/writer.test.js:  var oid = '1.2.840.113549.1.1.1';
usr/lib/node_modules/npm/node_modules/request/node_modules/http-signature/lib/util.js:  der.writeOID('1.2.840.113549.1.1.1');
usr/lib/node_modules/npm/node_modules/request/node_modules/http-signature/lib/util.js:  der.writeOID('1.2.840.10040.4.1');
usr/lib/node_modules/npm/node_modules/request/node_modules/http-signature/lib/util.js:    assert.equal(oid, '1.2.840.113549.1.1.1', 'pem not in RSA format');
usr/lib/node_modules/npm/node_modules/request/examples/README.md:  .pipe(request.post('http://127.0.0.1:3000'))
usr/lib/node_modules/npm/node_modules/minimatch/minimatch.js:        //  first in the list.  -- POSIX.2 2.8.3.2
usr/lib/node_modules/npm/node_modules/minimatch/browser.js:        //  first in the list.  -- POSIX.2 2.8.3.2
usr/lib/node_modules/npm/node_modules/node-gyp/node_modules/glob/node_modules/minimatch/minimatch.js:        //  first in the list.  -- POSIX.2 2.8.3.2
usr/lib/node_modules/npm/node_modules/node-gyp/node_modules/glob/node_modules/minimatch/browser.js:        //  first in the list.  -- POSIX.2 2.8.3.2
usr/lib/node_modules/npm/node_modules/node-gyp/node_modules/minimatch/minimatch.js:        //  first in the list.  -- POSIX.2 2.8.3.2
usr/lib/node_modules/npm/node_modules/node-gyp/gyp/pylib/gyp/xcode_emulation.py:  #   version: 5.0.1.0.1.1382131676
etc/config/network:	option ipaddr '127.0.0.1'
etc/config/network:	option netmask '255.0.0.0'
etc/config/network:	option ipaddr '192.168.1.1'
etc/config/network:	option netmask '255.255.255.0'
etc/mongod.conf:  bindIp: 127.0.0.1
etc/preinit:pi_ip=192.168.1.1
etc/preinit:pi_broadcast=192.168.1.255
etc/preinit:pi_netmask=255.255.255.0
etc/preinit:fs_failsafe_ip=192.168.1.1
etc/preinit:fs_failsafe_broadcast=192.168.1.255
etc/preinit:fs_failsafe_netmask=255.255.255.0
etc/monit.d/nodejs:if failed host 127.0.0.1 port 80 then restart
etc/monit.d/mongod:if failed host 127.0.0.1 port 27017 then restart
etc/monit.d/sgstatd:if failed host 127.0.0.1 port 4242 then restart
etc/hosts:127.0.0.1 localhost
etc/hosts:52.2.229.189    supergnome1.atnascorp.com sg1.atnascorp.com supergnome.atnascorp.com sg.atnascorp.com
www/node_modules/express/node_modules/proxy-addr/package.json:  "readme": "# proxy-addr\n\n[![NPM Version][npm-image]][npm-url]\n[![NPM Downloads][downloads-image]][downloads-url]\n[![Node.js Version][node-version-image]][node-version-url]\n[![Build Status][travis-image]][travis-url]\n[![Test Coverage][coveralls-image]][coveralls-url]\n\nDetermine address of proxied request\n\n## Install\n\n```sh\n$ npm install proxy-addr\n```\n\n## API\n\n```js\nvar proxyaddr = require('proxy-addr')\n```\n\n### proxyaddr(req, trust)\n\nReturn the address of the request, using the given `trust` parameter.\n\nThe `trust` argument is a function that returns `true` if you trust\nthe address, `false` if you don't. The closest untrusted address is\nreturned.\n\n```js\nproxyaddr(req, function(addr){ return addr === '127.0.0.1' })\nproxyaddr(req, function(addr, i){ return i < 1 })\n```\n\nThe `trust` arugment may also be a single IP address string or an\narray of trusted addresses, as plain IP addresses, CIDR-formatted\nstrings, or IP/netmask strings.\n\n```js\nproxyaddr(req, '127.0.0.1')\nproxyaddr(req, ['127.0.0.0/8', '10.0.0.0/8'])\nproxyaddr(req, ['127.0.0.0/255.0.0.0', '192.168.0.0/255.255.0.0'])\n```\n\nThis module also supports IPv6. Your IPv6 addresses will be normalized\nautomatically (i.e. `fe80::00ed:1` equals `fe80:0:0:0:0:0:ed:1`).\n\n```js\nproxyaddr(req, '::1')\nproxyaddr(req, ['::1/128', 'fe80::/10'])\nproxyaddr(req, ['fe80::/ffc0::'])\n```\n\nThis module will automatically work with IPv4-mapped IPv6 addresses\nas well to support node.js in IPv6-only mode. This means that you do\nnot have to specify both `::ffff:a00:1` and `10.0.0.1`.\n\nAs a convenience, this module also takes certain pre-defined names\nin addition to IP addresses, which expand into IP addresses:\n\n```js\nproxyaddr(req, 'loopback')\nproxyaddr(req, ['loopback', 'fc00:ac:1ab5:fff::1/64'])\n```\n\n  * `loopback`: IPv4 and IPv6 loopback addresses (like `::1` and\n    `127.0.0.1`).\n  * `linklocal`: IPv4 and IPv6 link-local addresses (like\n    `fe80::1:1:1:1` and `169.254.0.1`).\n  * `uniquelocal`: IPv4 private addresses and IPv6 unique-local\n    addresses (like `fc00:ac:1ab5:fff::1` and `192.168.0.1`).\n\nWhen `trust` is specified as a function, it will be called for each\naddress to determine if it is a trusted address. The function is\ngiven two arguments: `addr` and `i`, where `addr` is a string of\nthe address to check and `i` is a number that represents the distance\nfrom the socket address.\n\n### proxyaddr.all(req, [trust])\n\nReturn all the addresses of the request, optionally stopping at the\nfirst untrusted. This array is ordered from closest to furthest\n(i.e. `arr[0] === req.connection.remoteAddress`).\n\n```js\nproxyaddr.all(req)\n```\n\nThe optional `trust` argument takes the same arguments as `trust`\ndoes in `proxyaddr(req, trust)`.\n\n```js\nproxyaddr.all(req, 'loopback')\n```\n\n### proxyaddr.compile(val)\n\nCompiles argument `val` into a `trust` function. This function takes\nthe same arguments as `trust` does in `proxyaddr(req, trust)` and\nreturns a function suitable for `proxyaddr(req, trust)`.\n\n```js\nvar trust = proxyaddr.compile('localhost')\nvar addr  = proxyaddr(req, trust)\n```\n\nThis function is meant to be optimized for use against every request.\nIt is recommend to compile a trust function up-front for the trusted\nconfiguration and pass that to `proxyaddr(req, trust)` for each request.\n\n## Testing\n\n```sh\n$ npm test\n```\n\n## Benchmarks\n\n```sh\n$ npm run-script bench\n```\n\n## License\n\n[MIT](LICENSE)\n\n[npm-image]: https://img.shields.io/npm/v/proxy-addr.svg\n[npm-url]: https://npmjs.org/package/proxy-addr\n[node-version-image]: https://img.shields.io/node/v/proxy-addr.svg\n[node-version-url]: http://nodejs.org/download/\n[travis-image]: https://img.shields.io/travis/jshttp/proxy-addr/master.svg\n[travis-url]: https://travis-ci.org/jshttp/proxy-addr\n[coveralls-image]: https://img.shields.io/coveralls/jshttp/proxy-addr/master.svg\n[coveralls-url]: https://coveralls.io/r/jshttp/proxy-addr?branch=master\n[downloads-image]: https://img.shields.io/npm/dm/proxy-addr.svg\n[downloads-url]: https://npmjs.org/package/proxy-addr\n",
www/node_modules/express/node_modules/proxy-addr/node_modules/ipaddr.js/package.json:  "readme": "# ipaddr.js â€” an IPv6 and IPv4 address manipulation library\n\nipaddr.js is a small (1.9K minified and gzipped) library for manipulating\nIP addresses in JavaScript environments. It runs on both CommonJS runtimes\n(e.g. [nodejs]) and in a web browser.\n\nipaddr.js allows you to verify and parse string representation of an IP\naddress, match it against a CIDR range or range list, determine if it falls\ninto some reserved ranges (examples include loopback and private ranges),\nand convert between IPv4 and IPv4-mapped IPv6 addresses.\n\n[nodejs]: http://nodejs.org\n\n## Installation\n\n`npm install ipaddr.js`\n\n## API\n\nipaddr.js defines one object in the global scope: `ipaddr`. In CommonJS,\nit is exported from the module:\n\n```js\nvar ipaddr = require('ipaddr.js');\n```\n\nThe API consists of several global methods and two classes: ipaddr.IPv6 and ipaddr.IPv4.\n\n### Global methods\n\nThere are three global methods defined: `ipaddr.isValid`, `ipaddr.parse` and\n`ipaddr.process`. All of them receive a string as a single parameter.\n\nThe `ipaddr.isValid` method returns `true` if the address is a valid IPv4 or\nIPv6 address, and `false` otherwise. It does not throw any exceptions.\n\nThe `ipaddr.parse` method returns an object representing the IP address,\nor throws an `Error` if the passed string is not a valid representation of an\nIP address.\n\nThe `ipaddr.process` method works just like the `ipaddr.parse` one, but it\nautomatically converts IPv4-mapped IPv6 addresses to their IPv4 couterparts\nbefore returning. It is useful when you have a Node.js instance listening\non an IPv6 socket, and the `net.ivp6.bindv6only` sysctl parameter (or its\nequivalent on non-Linux OS) is set to 0. In this case, you can accept IPv4\nconnections on your IPv6-only socket, but the remote address will be mangled.\nUse `ipaddr.process` method to automatically demangle it.\n\n### Object representation\n\nParsing methods return an object which descends from `ipaddr.IPv6` or\n`ipaddr.IPv4`. These objects share some properties, but most of them differ.\n\n#### Shared properties\n\nOne can determine the type of address by calling `addr.kind()`. It will return\neither `\"ipv6\"` or `\"ipv4\"`.\n\nAn address can be converted back to its string representation with `addr.toString()`.\nNote that this method:\n * does not return the original string used to create the object (in fact, there is\n   no way of getting that string)\n * returns a compact representation (when it is applicable)\n\nA `match(range, bits)` method can be used to check if the address falls into a\ncertain CIDR range.\nNote that an address can be (obviously) matched only against an address of the same type.\n\nFor example:\n\n```js\nvar addr = ipaddr.parse(\"2001:db8:1234::1\");\nvar range = ipaddr.parse(\"2001:db8::\");\n\naddr.match(range, 32); // => true\n```\n\nAlternatively, `match` can also be called as `match([range, bits])`. In this way,\nit can be used together with the `parseCIDR(string)` method, which parses an IP\naddress together with a CIDR range.\n\nFor example:\n\n```js\nvar addr = ipaddr.parse(\"2001:db8:1234::1\");\n\naddr.match(ipaddr.parseCIDR(\"2001:db8::/32\")); // => true\n```\n\nA `range()` method returns one of predefined names for several special ranges defined\nby IP protocols. The exact names (and their respective CIDR ranges) can be looked up\nin the source: [IPv6 ranges] and [IPv4 ranges]. Some common ones include `\"unicast\"`\n(the default one) and `\"reserved\"`.\n\nYou can match against your own range list by using\n`ipaddr.subnetMatch(address, rangeList, defaultName)` method. It can work with both\nIPv6 and IPv4 addresses, and accepts a name-to-subnet map as the range list. For example:\n\n```js\nvar rangeList = {\n  documentationOnly: [ ipaddr.parse('2001:db8::'), 32 ],\n  tunnelProviders: [\n    [ ipaddr.parse('2001:470::'), 32 ], // he.net\n    [ ipaddr.parse('2001:5c0::'), 32 ]  // freenet6\n  ]\n};\nipaddr.subnetMatch(ipaddr.parse('2001:470:8:66::1'), rangeList, 'unknown'); // => \"he.net\"\n```\n\nThe addresses can be converted to their byte representation with `toByteArray()`.\n(Actually, JavaScript mostly does not know about byte buffers. They are emulated with\narrays of numbers, each in range of 0..255.)\n\n```js\nvar bytes = ipaddr.parse('2a00:1450:8007::68').toByteArray(); // ipv6.google.com\nbytes // => [42, 0x00, 0x14, 0x50, 0x80, 0x07, 0x00, <zeroes...>, 0x00, 0x68 ]\n```\n\nThe `ipaddr.IPv4` and `ipaddr.IPv6` objects have some methods defined, too. All of them\nhave the same interface for both protocols, and are similar to global methods.\n\n`ipaddr.IPvX.isValid(string)` can be used to check if the string is a valid address\nfor particular protocol, and `ipaddr.IPvX.parse(string)` is the error-throwing parser.\n\n[IPv6 ranges]: https://github.com/whitequark/ipaddr.js/blob/master/src/ipaddr.coffee#L186\n[IPv4 ranges]: https://github.com/whitequark/ipaddr.js/blob/master/src/ipaddr.coffee#L71\n\n#### IPv6 properties\n\nSometimes you will want to convert IPv6 not to a compact string representation (with\nthe `::` substitution); the `toNormalizedString()` method will return an address where\nall zeroes are explicit.\n\nFor example:\n\n```js\nvar addr = ipaddr.parse(\"2001:0db8::0001\");\naddr.toString(); // => \"2001:db8::1\"\naddr.toNormalizedString(); // => \"2001:db8:0:0:0:0:0:1\"\n```\n\nThe `isIPv4MappedAddress()` method will return `true` if this address is an IPv4-mapped\none, and `toIPv4Address()` will return an IPv4 object address.\n\nTo access the underlying binary representation of the address, use `addr.parts`.\n\n```js\nvar addr = ipaddr.parse(\"2001:db8:10::1234:DEAD\");\naddr.parts // => [0x2001, 0xdb8, 0x10, 0, 0, 0, 0x1234, 0xdead]\n```\n\n#### IPv4 properties\n\n`toIPv4MappedAddress()` will return a corresponding IPv4-mapped IPv6 address.\n\nTo access the underlying representation of the address, use `addr.octets`.\n\n```js\nvar addr = ipaddr.parse(\"192.168.1.1\");\naddr.octets // => [192, 168, 1, 1]\n```\n",
www/node_modules/express/node_modules/proxy-addr/node_modules/ipaddr.js/test/ipaddr.test.coffee:    test.equal(addr.toString(), '192.168.1.1')
www/node_modules/express/node_modules/proxy-addr/node_modules/ipaddr.js/test/ipaddr.test.coffee:    test.equal(ipaddr.IPv4.isIPv4('192.168.007.0xa'), true)
www/node_modules/express/node_modules/proxy-addr/node_modules/ipaddr.js/test/ipaddr.test.coffee:    test.equal(ipaddr.IPv4.isIPv4('1024.0.0.1'),      true)
www/node_modules/express/node_modules/proxy-addr/node_modules/ipaddr.js/test/ipaddr.test.coffee:    test.equal(ipaddr.IPv4.isValid('192.168.007.0xa'), true)
www/node_modules/express/node_modules/proxy-addr/node_modules/ipaddr.js/test/ipaddr.test.coffee:    test.equal(ipaddr.IPv4.isValid('1024.0.0.1'),      false)
www/node_modules/express/node_modules/proxy-addr/node_modules/ipaddr.js/test/ipaddr.test.coffee:    test.deepEqual(ipaddr.IPv4.parse('192.168.1.1').octets,  [192, 168, 1, 1])
www/node_modules/express/node_modules/proxy-addr/node_modules/ipaddr.js/test/ipaddr.test.coffee:    test.deepEqual(ipaddr.IPv4.parse('0xc0.168.1.1').octets, [192, 168, 1, 1])
www/node_modules/express/node_modules/proxy-addr/node_modules/ipaddr.js/test/ipaddr.test.coffee:    test.deepEqual(ipaddr.IPv4.parse('192.0250.1.1').octets, [192, 168, 1, 1])
www/node_modules/express/node_modules/proxy-addr/node_modules/ipaddr.js/test/ipaddr.test.coffee:    test.equal(addr.match(ipaddr.IPv4.parse('0.0.0.0'), 0),   true)
www/node_modules/express/node_modules/proxy-addr/node_modules/ipaddr.js/test/ipaddr.test.coffee:    test.equal(addr.match(ipaddr.IPv4.parse('11.0.0.0'), 8),  false)
www/node_modules/express/node_modules/proxy-addr/node_modules/ipaddr.js/test/ipaddr.test.coffee:    test.equal(addr.match(ipaddr.IPv4.parse('10.0.0.0'), 8),  true)
www/node_modules/express/node_modules/proxy-addr/node_modules/ipaddr.js/test/ipaddr.test.coffee:    test.equal(addr.match(ipaddr.IPv4.parse('10.0.0.1'), 8),  true)
www/node_modules/express/node_modules/proxy-addr/node_modules/ipaddr.js/test/ipaddr.test.coffee:    test.equal(addr.match(ipaddr.IPv4.parse('10.0.0.10'), 8), true)
www/node_modules/express/node_modules/proxy-addr/node_modules/ipaddr.js/test/ipaddr.test.coffee:    test.equal(addr.match(ipaddr.IPv4.parse('10.5.5.0'), 16), true)
www/node_modules/express/node_modules/proxy-addr/node_modules/ipaddr.js/test/ipaddr.test.coffee:    test.equal(addr.match(ipaddr.IPv4.parse('10.4.5.0'), 16), false)
www/node_modules/express/node_modules/proxy-addr/node_modules/ipaddr.js/test/ipaddr.test.coffee:    test.equal(addr.match(ipaddr.IPv4.parse('10.4.5.0'), 15), true)
www/node_modules/express/node_modules/proxy-addr/node_modules/ipaddr.js/test/ipaddr.test.coffee:    test.equal(addr.match(ipaddr.IPv4.parse('10.5.0.2'), 32), false)
www/node_modules/express/node_modules/proxy-addr/node_modules/ipaddr.js/test/ipaddr.test.coffee:    test.equal(addr.match(ipaddr.IPv4.parseCIDR('0.0.0.0/0')),   true)
www/node_modules/express/node_modules/proxy-addr/node_modules/ipaddr.js/test/ipaddr.test.coffee:    test.equal(addr.match(ipaddr.IPv4.parseCIDR('11.0.0.0/8')),  false)
www/node_modules/express/node_modules/proxy-addr/node_modules/ipaddr.js/test/ipaddr.test.coffee:    test.equal(addr.match(ipaddr.IPv4.parseCIDR('10.0.0.0/8')),  true)
www/node_modules/express/node_modules/proxy-addr/node_modules/ipaddr.js/test/ipaddr.test.coffee:    test.equal(addr.match(ipaddr.IPv4.parseCIDR('10.0.0.1/8')),  true)
www/node_modules/express/node_modules/proxy-addr/node_modules/ipaddr.js/test/ipaddr.test.coffee:    test.equal(addr.match(ipaddr.IPv4.parseCIDR('10.0.0.10/8')), true)
www/node_modules/express/node_modules/proxy-addr/node_modules/ipaddr.js/test/ipaddr.test.coffee:    test.equal(addr.match(ipaddr.IPv4.parseCIDR('10.5.5.0/16')), true)
www/node_modules/express/node_modules/proxy-addr/node_modules/ipaddr.js/test/ipaddr.test.coffee:    test.equal(addr.match(ipaddr.IPv4.parseCIDR('10.4.5.0/16')), false)
www/node_modules/express/node_modules/proxy-addr/node_modules/ipaddr.js/test/ipaddr.test.coffee:    test.equal(addr.match(ipaddr.IPv4.parseCIDR('10.4.5.0/15')), true)
www/node_modules/express/node_modules/proxy-addr/node_modules/ipaddr.js/test/ipaddr.test.coffee:    test.equal(addr.match(ipaddr.IPv4.parseCIDR('10.5.0.2/32')), false)
www/node_modules/express/node_modules/proxy-addr/node_modules/ipaddr.js/test/ipaddr.test.coffee:    test.equal(addr.match(ipaddr.IPv4.parseCIDR('10.5.0.1/32')), true)
www/node_modules/express/node_modules/proxy-addr/node_modules/ipaddr.js/test/ipaddr.test.coffee:      ipaddr.IPv4.parseCIDR('10.5.0.1')
www/node_modules/express/node_modules/proxy-addr/node_modules/ipaddr.js/test/ipaddr.test.coffee:    test.equal(ipaddr.IPv4.parse('0.0.0.0').range(),         'unspecified')
www/node_modules/express/node_modules/proxy-addr/node_modules/ipaddr.js/test/ipaddr.test.coffee:    test.equal(ipaddr.IPv4.parse('0.1.0.0').range(),         'unspecified')
www/node_modules/express/node_modules/proxy-addr/node_modules/ipaddr.js/test/ipaddr.test.coffee:    test.equal(ipaddr.IPv4.parse('10.1.0.1').range(),        'private')
www/node_modules/express/node_modules/proxy-addr/node_modules/ipaddr.js/test/ipaddr.test.coffee:    test.equal(ipaddr.IPv4.parse('192.168.2.1').range(),     'private')
www/node_modules/express/node_modules/proxy-addr/node_modules/ipaddr.js/test/ipaddr.test.coffee:    test.equal(ipaddr.IPv4.parse('224.100.0.1').range(),     'multicast')
www/node_modules/express/node_modules/proxy-addr/node_modules/ipaddr.js/test/ipaddr.test.coffee:    test.equal(ipaddr.IPv4.parse('169.254.15.0').range(),    'linkLocal')
www/node_modules/express/node_modules/proxy-addr/node_modules/ipaddr.js/test/ipaddr.test.coffee:    test.equal(ipaddr.IPv4.parse('127.1.1.1').range(),       'loopback')
www/node_modules/express/node_modules/proxy-addr/node_modules/ipaddr.js/test/ipaddr.test.coffee:    test.equal(ipaddr.IPv4.parse('255.255.255.255').range(), 'broadcast')
www/node_modules/express/node_modules/proxy-addr/node_modules/ipaddr.js/test/ipaddr.test.coffee:    test.equal(ipaddr.IPv4.parse('240.1.2.3').range(),       'reserved')
www/node_modules/express/node_modules/proxy-addr/node_modules/ipaddr.js/test/ipaddr.test.coffee:    test.equal(ipaddr.IPv4.parse('8.8.8.8').range(),         'unicast')
www/node_modules/express/node_modules/proxy-addr/node_modules/ipaddr.js/test/ipaddr.test.coffee:    test.equal(ipaddr.IPv6.isIPv6('::ffff:192.168.1.1'),   true)
www/node_modules/express/node_modules/proxy-addr/node_modules/ipaddr.js/test/ipaddr.test.coffee:    test.equal(ipaddr.IPv6.isIPv6('::ffff:300.168.1.1'),   true)
www/node_modules/express/node_modules/proxy-addr/node_modules/ipaddr.js/test/ipaddr.test.coffee:    test.equal(ipaddr.IPv6.isIPv6('::ffff:300.168.1.1:0'), false)
www/node_modules/express/node_modules/proxy-addr/node_modules/ipaddr.js/test/ipaddr.test.coffee:    test.equal(ipaddr.IPv6.isValid('::ffff:192.168.1.1'),   true)
www/node_modules/express/node_modules/proxy-addr/node_modules/ipaddr.js/test/ipaddr.test.coffee:    test.equal(ipaddr.IPv6.isValid('::ffff:300.168.1.1'),   false)
www/node_modules/express/node_modules/proxy-addr/node_modules/ipaddr.js/test/ipaddr.test.coffee:    test.equal(ipaddr.IPv6.isValid('::ffff:300.168.1.1:0'), false)
www/node_modules/express/node_modules/proxy-addr/node_modules/ipaddr.js/test/ipaddr.test.coffee:    addr = ipaddr.IPv4.parse('77.88.21.11')
www/node_modules/express/node_modules/proxy-addr/node_modules/ipaddr.js/test/ipaddr.test.coffee:    test.equal(ipaddr.IPv6.parse('::ffff:192.168.1.10').range(),       'ipv4Mapped')
www/node_modules/express/node_modules/proxy-addr/node_modules/ipaddr.js/test/ipaddr.test.coffee:    test.equal(ipaddr.IPv6.parse('::ffff:0:192.168.1.10').range(),     'rfc6145')
www/node_modules/express/node_modules/proxy-addr/node_modules/ipaddr.js/test/ipaddr.test.coffee:    test.equal(ipaddr.parse('8.8.8.8').kind(), 'ipv4')
www/node_modules/express/node_modules/proxy-addr/node_modules/ipaddr.js/test/ipaddr.test.coffee:    test.equal(ipaddr.process('8.8.8.8').kind(), 'ipv4')
www/node_modules/express/node_modules/proxy-addr/node_modules/ipaddr.js/test/ipaddr.test.coffee:    test.equal(ipaddr.process('::ffff:192.168.1.1').kind(), 'ipv4')
www/node_modules/express/node_modules/proxy-addr/node_modules/ipaddr.js/test/ipaddr.test.coffee:    test.deepEqual(ipaddr.parse('1.2.3.4').toByteArray(),
www/node_modules/express/node_modules/proxy-addr/node_modules/ipaddr.js/test/ipaddr.test.coffee:    test.deepEqual([ipaddr.IPv4.parse('1.2.3.4'), 5],
www/node_modules/express/node_modules/proxy-addr/node_modules/ipaddr.js/test/ipaddr.test.coffee:                   ipaddr.parseCIDR('1.2.3.4/5'))
www/node_modules/express/node_modules/proxy-addr/node_modules/ipaddr.js/README.md:var addr = ipaddr.parse("192.168.1.1");
www/node_modules/express/node_modules/proxy-addr/index.js:  linklocal: ['169.254.0.0/16', 'fe80::/10'],
www/node_modules/express/node_modules/proxy-addr/index.js:  loopback: ['127.0.0.1/8', '::1/128'],
www/node_modules/express/node_modules/proxy-addr/index.js:  uniquelocal: ['10.0.0.0/8', '172.16.0.0/12', '192.168.0.0/16', 'fc00::/7']
www/node_modules/express/node_modules/proxy-addr/README.md:proxyaddr(req, function(addr){ return addr === '127.0.0.1' })
www/node_modules/express/node_modules/proxy-addr/README.md:proxyaddr(req, '127.0.0.1')
www/node_modules/express/node_modules/proxy-addr/README.md:proxyaddr(req, ['127.0.0.0/8', '10.0.0.0/8'])
www/node_modules/express/node_modules/proxy-addr/README.md:proxyaddr(req, ['127.0.0.0/255.0.0.0', '192.168.0.0/255.255.0.0'])
www/node_modules/express/node_modules/proxy-addr/README.md:not have to specify both `::ffff:a00:1` and `10.0.0.1`.
www/node_modules/express/node_modules/proxy-addr/README.md:    `127.0.0.1`).
www/node_modules/express/node_modules/proxy-addr/README.md:    `fe80::1:1:1:1` and `169.254.0.1`).
www/node_modules/express/node_modules/proxy-addr/README.md:    addresses (like `fc00:ac:1ab5:fff::1` and `192.168.0.1`).
www/node_modules/express/node_modules/etag/package.json:  "readme": "# etag\n\n[![NPM Version][npm-image]][npm-url]\n[![NPM Downloads][downloads-image]][downloads-url]\n[![Node.js Version][node-version-image]][node-version-url]\n[![Build Status][travis-image]][travis-url]\n[![Test Coverage][coveralls-image]][coveralls-url]\n\nCreate simple ETags\n\n## Installation\n\n```sh\n$ npm install etag\n```\n\n## API\n\n```js\nvar etag = require('etag')\n```\n\n### etag(entity, [options])\n\nGenerate a strong ETag for the given entity. This should be the complete\nbody of the entity. Strings, `Buffer`s, and `fs.Stats` are accepted. By\ndefault, a strong ETag is generated except for `fs.Stats`, which will\ngenerate a weak ETag (this can be overwritten by `options.weak`).\n\n```js\nres.setHeader('ETag', etag(body))\n```\n\n#### Options\n\n`etag` accepts these properties in the options object.\n\n##### weak\n\nSpecifies if the generated ETag will include the weak validator mark (that\nis, the leading `W/`). The actual entity tag is the same. The default value\nis `false`, unless the `entity` is `fs.Stats`, in which case it is `true`.\n\n## Testing\n\n```sh\n$ npm test\n```\n\n## Benchmark\n\n```bash\n$ npm run-script bench\n\n> etag@1.6.0 bench nodejs-etag\n> node benchmark/index.js\n\n  http_parser@1.0\n  node@0.10.33\n  v8@3.14.5.9\n  ares@1.9.0-DEV\n  uv@0.10.29\n  zlib@1.2.3\n  modules@11\n  openssl@1.0.1j\n\n> node benchmark/body0-100b.js\n\n  100B body\n\n  1 test completed.\n  2 tests completed.\n  3 tests completed.\n  4 tests completed.\n\n* buffer - strong x 289,198 ops/sec Â±1.09% (190 runs sampled)\n* buffer - weak   x 287,838 ops/sec Â±0.91% (189 runs sampled)\n* string - strong x 284,586 ops/sec Â±1.05% (192 runs sampled)\n* string - weak   x 287,439 ops/sec Â±0.82% (192 runs sampled)\n\n> node benchmark/body1-1kb.js\n\n  1KB body\n\n  1 test completed.\n  2 tests completed.\n  3 tests completed.\n  4 tests completed.\n\n* buffer - strong x 212,423 ops/sec Â±0.75% (193 runs sampled)\n* buffer - weak   x 211,871 ops/sec Â±0.74% (194 runs sampled)\n  string - strong x 205,291 ops/sec Â±0.86% (194 runs sampled)\n  string - weak   x 208,463 ops/sec Â±0.79% (192 runs sampled)\n\n> node benchmark/body2-5kb.js\n\n  5KB body\n\n  1 test completed.\n  2 tests completed.\n  3 tests completed.\n  4 tests completed.\n\n* buffer - strong x 92,901 ops/sec Â±0.58% (195 runs sampled)\n* buffer - weak   x 93,045 ops/sec Â±0.65% (192 runs sampled)\n  string - strong x 89,621 ops/sec Â±0.68% (194 runs sampled)\n  string - weak   x 90,070 ops/sec Â±0.70% (196 runs sampled)\n\n> node benchmark/body3-10kb.js\n\n  10KB body\n\n  1 test completed.\n  2 tests completed.\n  3 tests completed.\n  4 tests completed.\n\n* buffer - strong x 54,220 ops/sec Â±0.85% (192 runs sampled)\n* buffer - weak   x 54,069 ops/sec Â±0.83% (191 runs sampled)\n  string - strong x 53,078 ops/sec Â±0.53% (194 runs sampled)\n  string - weak   x 53,849 ops/sec Â±0.47% (197 runs sampled)\n\n> node benchmark/body4-100kb.js\n\n  100KB body\n\n  1 test completed.\n  2 tests completed.\n  3 tests completed.\n  4 tests completed.\n\n* buffer - strong x 6,673 ops/sec Â±0.15% (197 runs sampled)\n* buffer - weak   x 6,716 ops/sec Â±0.12% (198 runs sampled)\n  string - strong x 6,357 ops/sec Â±0.14% (197 runs sampled)\n  string - weak   x 6,344 ops/sec Â±0.21% (197 runs sampled)\n\n> node benchmark/stats.js\n\n  stats\n\n  1 test completed.\n  2 tests completed.\n  3 tests completed.\n  4 tests completed.\n\n* real - strong x 1,671,989 ops/sec Â±0.13% (197 runs sampled)\n* real - weak   x 1,681,297 ops/sec Â±0.12% (198 runs sampled)\n  fake - strong x   927,063 ops/sec Â±0.14% (198 runs sampled)\n  fake - weak   x   914,461 ops/sec Â±0.41% (191 runs sampled)\n```\n\n## License\n\n[MIT](LICENSE)\n\n[npm-image]: https://img.shields.io/npm/v/etag.svg\n[npm-url]: https://npmjs.org/package/etag\n[node-version-image]: https://img.shields.io/node/v/etag.svg\n[node-version-url]: http://nodejs.org/download/\n[travis-image]: https://img.shields.io/travis/jshttp/etag/master.svg\n[travis-url]: https://travis-ci.org/jshttp/etag\n[coveralls-image]: https://img.shields.io/coveralls/jshttp/etag/master.svg\n[coveralls-url]: https://coveralls.io/r/jshttp/etag?branch=master\n[downloads-image]: https://img.shields.io/npm/dm/etag.svg\n[downloads-url]: https://npmjs.org/package/etag\n",
www/node_modules/express/node_modules/etag/README.md:  v8@3.14.5.9
www/node_modules/express/node_modules/content-type/index.js: * RegExp to match *( ";" parameter ) in RFC 7231 sec 3.1.1.1
www/node_modules/express/History.md:   - `app.set('trust proxy', '10.0.0.1')` trust single IP
www/node_modules/express/History.md:   - `app.set('trust proxy', '10.0.0.1/16')` trust subnet
www/node_modules/express/History.md:   - `app.set('trust proxy', '10.0.0.1, 10.0.0.2')` trust list
www/node_modules/express/History.md:   - `app.set('trust proxy', '10.0.0.1')` trust single IP
www/node_modules/express/History.md:   - `app.set('trust proxy', '10.0.0.1/16')` trust subnet
www/node_modules/express/History.md:   - `app.set('trust proxy', '10.0.0.1, 10.0.0.2')` trust list
www/node_modules/session/node_modules/vows/node_modules/glob/node_modules/minimatch/test/defaults.js:      "first in the list.  -- POSIX.2 2.8.3.2"
www/node_modules/session/node_modules/vows/node_modules/glob/node_modules/minimatch/test/basic.js:    "first in the list.  -- POSIX.2 2.8.3.2"
www/node_modules/session/node_modules/vows/node_modules/glob/node_modules/minimatch/minimatch.js:        //  first in the list.  -- POSIX.2 2.8.3.2
www/node_modules/session/node_modules/vows/node_modules/diff/package.json:  "readme": "# jsdiff\n\n[![Build Status](https://secure.travis-ci.org/kpdecker/jsdiff.png)](http://travis-ci.org/kpdecker/jsdiff)\n\nA javascript text differencing implementation.\n\nBased on the algorithm proposed in\n[\"An O(ND) Difference Algorithm and its Variations\" (Myers, 1986)](http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.4.6927).\n\n## Installation\n\n    npm install diff\n\nor\n\n    git clone git://github.com/kpdecker/jsdiff.git\n\n## API\n\n* `JsDiff.diffChars(oldStr, newStr)` - diffs two blocks of text, comparing character by character.\n\n    Returns a list of change objects (See below).\n\n* `JsDiff.diffWords(oldStr, newStr)` - diffs two blocks of text, comparing word by word.\n\n    Returns a list of change objects (See below).\n\n* `JsDiff.diffLines(oldStr, newStr)` - diffs two blocks of text, comparing line by line.\n\n    Returns a list of change objects (See below).\n\n* `JsDiff.diffCss(oldStr, newStr)` - diffs two blocks of text, comparing CSS tokens.\n\n    Returns a list of change objects (See below).\n\n* `JsDiff.createPatch(fileName, oldStr, newStr, oldHeader, newHeader)` - creates a unified diff patch.\n\n    Parameters:\n    * `fileName` : String to be output in the filename sections of the patch\n    * `oldStr` : Original string value\n    * `newStr` : New string value\n    * `oldHeader` : Additional information to include in the old file header\n    * `newHeader` : Additional information to include in thew new file header\n\n* `JsDiff.applyPatch(oldStr, diffStr)` - applies a unified diff patch.\n\n    Return a string containing new version of provided data.\n\n* `convertChangesToXML(changes)` - converts a list of changes to a serialized XML format\n\n### Change Objects\nMany of the methods above return change objects. These objects are consist of the following fields:\n\n* `value`: Text content\n* `added`: True if the value was inserted into the new string\n* `removed`: True of the value was removed from the old string\n\nNote that some cases may omit a particular flag field. Comparison on the flag fields should always be done in a truthy or falsy manner.\n\n## Examples\n\nBasic example in Node\n\n```js\nrequire('colors')\nvar jsdiff = require('diff');\n\nvar one = 'beep boop';\nvar other = 'beep boob blah';\n\nvar diff = jsdiff.diffChars(one, other);\n\ndiff.forEach(function(part){\n  // green for additions, red for deletions\n  // grey for common parts\n  var color = part.added ? 'green' :\n    part.removed ? 'red' : 'grey';\n  process.stderr.write(part.value[color]);\n});\n\nconsole.log()\n```\nRunning the above program should yield\n\n<img src=\"images/node_example.png\" alt=\"Node Example\">\n\nBasic example in a web page\n\n```html\n<pre id=\"display\"></pre>\n<script src=\"diff.js\"></script>\n<script>\nvar one = 'beep boop';\nvar other = 'beep boob blah';\n\nvar diff = JsDiff.diffChars(one, other);\n\ndiff.forEach(function(part){\n  // green for additions, red for deletions\n  // grey for common parts\n  var color = part.added ? 'green' :\n    part.removed ? 'red' : 'grey';\n  var span = document.createElement('span');\n  span.style.color = color;\n  span.appendChild(document\n    .createTextNode(part.value));\n  display.appendChild(span);\n});\n</script>\n```\n\nOpen the above .html file in a browser and you should see\n\n<img src=\"images/web_example.png\" alt=\"Node Example\">\n\n**[Full online demo](http://kpdecker.github.com/jsdiff)**\n\n## License\n\nSoftware License Agreement (BSD License)\n\nCopyright (c) 2009-2011, Kevin Decker kpdecker@gmail.com\n\nAll rights reserved.\n\nRedistribution and use of this software in source and binary forms, with or without modification,\nare permitted provided that the following conditions are met:\n\n* Redistributions of source code must retain the above\n  copyright notice, this list of conditions and the\n  following disclaimer.\n\n* Redistributions in binary form must reproduce the above\n  copyright notice, this list of conditions and the\n  following disclaimer in the documentation and/or other\n  materials provided with the distribution.\n\n* Neither the name of Kevin Decker nor the names of its\n  contributors may be used to endorse or promote products\n  derived from this software without specific prior\n  written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\nIMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\nFITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR\nCONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\nDATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER\nIN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\nOF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n\n[![Bitdeli Badge](https://d2weczhvl823v0.cloudfront.net/kpdecker/jsdiff/trend.png)](https://bitdeli.com/free \"Bitdeli Badge\")\n\n",
www/node_modules/session/node_modules/vows/node_modules/diff/diff.js: * http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.4.6927
www/node_modules/session/node_modules/vows/node_modules/diff/README.md:["An O(ND) Difference Algorithm and its Variations" (Myers, 1986)](http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.4.6927).
www/node_modules/cookie-parser/package.json:  "readme": "# cookie-parser\n\n[![NPM Version][npm-image]][npm-url]\n[![NPM Downloads][downloads-image]][downloads-url]\n[![Build Status][travis-image]][travis-url]\n[![Test Coverage][coveralls-image]][coveralls-url]\n\nParse `Cookie` header and populate `req.cookies` with an object keyed by the cookie\nnames. Optionally you may enable signed cookie support by passing a `secret` string,\nwhich assigns `req.secret` so it may be used by other middleware.\n\n## Installation\n\n```sh\n$ npm install cookie-parser\n```\n\n## API\n\n```js\nvar express      = require('express')\nvar cookieParser = require('cookie-parser')\n\nvar app = express()\napp.use(cookieParser())\n```\n\n### cookieParser(secret, options)\n\n- `secret` a string used for signing cookies. This is optional and if not specified, will not parse signed cookies.\n- `options` an object that is passed to `cookie.parse` as the second option. See [cookie](https://www.npmjs.org/package/cookie) for more information.\n  - `decode` a function to decode the value of the cookie\n\n### cookieParser.JSONCookie(str)\n\nParse a cookie value as a JSON cookie. This will return the parsed JSON value if it was a JSON cookie, otherwise it will return the passed value.\n\n### cookieParser.JSONCookies(cookies)\n\nGiven an object, this will iterate over the keys and call `JSONCookie` on each value. This will return the same object passed in.\n\n### cookieParser.signedCookie(str, secret)\n\nParse a cookie value as a signed cookie. This will return the parsed unsigned value if it was a signed cookie and the signature was valid, otherwise it will return the passed value.\n\n### cookieParser.signedCookies(cookies, secret)\n\nGiven an object, this will iterate over the keys and check if any value is a signed cookie. If it is a signed cookie and the signature is valid, the key will be deleted from the object and added to the new object that is returned.\n\n## Example\n\n```js\nvar express      = require('express')\nvar cookieParser = require('cookie-parser')\n\nvar app = express()\napp.use(cookieParser())\n\napp.get('/', function(req, res) {\n  console.log(\"Cookies: \", req.cookies)\n})\n\napp.listen(8080)\n\n// curl command that sends an HTTP request with two cookies\n// curl http://127.0.0.1:8080 --cookie \"Cho=Kim;Greet=Hello\"\n```\n\n### [MIT Licensed](LICENSE)\n\n[npm-image]: https://img.shields.io/npm/v/cookie-parser.svg\n[npm-url]: https://npmjs.org/package/cookie-parser\n[travis-image]: https://img.shields.io/travis/expressjs/cookie-parser/master.svg\n[travis-url]: https://travis-ci.org/expressjs/cookie-parser\n[coveralls-image]: https://img.shields.io/coveralls/expressjs/cookie-parser/master.svg\n[coveralls-url]: https://coveralls.io/r/expressjs/cookie-parser?branch=master\n[downloads-image]: https://img.shields.io/npm/dm/cookie-parser.svg\n[downloads-url]: https://npmjs.org/package/cookie-parser\n",
www/node_modules/cookie-parser/README.md:// curl http://127.0.0.1:8080 --cookie "Cho=Kim;Greet=Hello"
www/node_modules/monk/package.json:  "readme": "# monk\n\n[![build status](https://secure.travis-ci.org/Automattic/monk.png?branch=master)](https://secure.travis-ci.org/Automattic/monk)\n\nMonk is a tiny layer that provides simple yet substantial usability\nimprovements for MongoDB usage within Node.JS.\n\n```js\nvar db = require('monk')('localhost/mydb');\nvar users = db.get('users');\n\nusers.index('name last');\nusers.insert({ name: 'Tobi', bigdata: {} });\nusers.find({ name: 'Loki' }, '-bigdata', function () {\n  // exclude bigdata field\n});\nusers.find({}, {sort: {name: 1}}, function () {\n  // sorted by name field\n});\nusers.remove({ name: 'Loki' });\n\ndb.close();\n```\n\n## Features\n\n- Command buffering. You can start querying right away.\n- Promises built-in for all queries. Easy interoperability with modules.\n- Easy connections / configuration\n- Well-designed signatures\n- Improvements to the MongoDB APIs (eg: `findAndModify` supports the\n  `update` signature style)\n- Auto-casting of `_id` in queries\n- Builds on top of [mongoskin](http://github.com/kissjs/node-mongoskin)\n- Allows to set global options or collection-level options for queries. (eg:\n  `safe` is `true` by default for all queries)\n\n## How to use\n\n### Connecting\n\n#### Single server\n\n```js\nvar db = require('monk')('localhost/mydb')\n```\n\n#### Replica set\n\n```js\nvar db = require('monk')('localhost/mydb,192.168.1.1')\n```\n\n### Disconnecting\n\n```js\ndb.close()\n```\n\n### Collections\n\n#### Getting one\n\n```js\nvar users = db.get('users')\n// users.insert(), users.update() â€¦ (see below)\n```\n\n#### Dropping\n\n```js\nusers.drop(fn);\n```\n\n### Signatures\n\n- All commands accept the simple `data[, â€¦], fn`. For example\n    - `find({}, fn)`\n    - `findOne({}, fn)`\n    - `update({}, {}, fn)` `findAndModify({}, {}, fn)`\n    - `findById('id', fn)`\n    - `remove({}, fn)`\n- You can pass options in the middle: `data[, â€¦], options, fn`\n- You can pass fields to select as an array: `data[, â€¦], ['field', â€¦], fn`\n- You can pass fields as a string delimited by spaces:\n  `data[, â€¦], 'field1 field2', fn`\n- To exclude a field, prefix the field name with '-':\n  `data[, â€¦], '-field1', fn`\n\n### Promises\n\nAll methods that perform an async action return a promise.\n\n```js\nvar promise = users.insert({});\npromise.type; // 'insert' in this case\npromise.error(function(err){});\npromise.on('error', function(err){});\npromise.on('success', function(doc){});\npromise.on('complete', function(err, doc){});\npromise.success(function(doc){});\n```\n\n### Indexes\n\n```js\nusers.index('name.first', fn);\nusers.index('email', { unique: true }); // unique\nusers.index('name.first name.last') // compound\nusers.index({ 'email': 1, 'password': -1 }); // compound with sort\nusers.index('email', { sparse: true }, fn); // with options\nusers.indexes(fn); // get indexes\nusers.dropIndex(name, fn); // drop an index\nusers.dropIndexes(fn); // drop all indexes\n```\n\n### Inserting\n\n```js\nusers.insert({ a: 'b' }, function (err, doc) {\n  if (err) throw err;\n});\n```\n\n### Casting\n\nTo cast to `ObjectId`:\n\n```js\nusers.id() // returns new generated ObjectID\nusers.id('hexstring') // returns ObjectId\nusers.id(obj) // returns ObjectId\n```\n\n### Updating\n\n```js\nusers.update({}, {}, fn);\nusers.updateById('id', {}, fn);\n```\n\n### Finding\n\n#### Many\n\n```js\nusers.find({}, function (err, docs){});\n```\n\n#### By ID\n\n```js\nusers.findById('hex representation', function(err, doc){});\nusers.findById(oid, function(err, doc){});\n```\n\n#### Single doc\n\n`findOne` also provides the `findById` functionality.\n\n```js\nusers.findOne({ name: 'test' }).on('success', function (doc) {});\n```\n\n#### And modify\n\n```js\nusers.findAndModify({ query: {}, update: {} });\nusers.findAndModify({ _id: '' }, { $set: {} });\n```\n\n#### Streaming\n\nNote: `stream: true` is optional if you register an `each` handler in the\nsame tick. In the following example I just include it for extra clarity.\n\n```js\nusers.find({}, { stream: true })\n  .each(function(doc){})\n  .error(function(err){})\n  .success(function(){});\n```\n\n##### Destroying a cursor\n\nOn the returned promise you can call `destroy()`. Upon the cursor\nclosing the `success` event will be emitted.\n\n### Removing\n\n```js\nusers.remove({ a: 'b' }, function (err) {\n  if (err) throw err;\n});\n```\n\n### Global options\n\n```js\nvar db = require('monk')('localhost/mydb')\ndb.options.multi = true; // global multi-doc update\ndb.get('users').options.multi = false; // collection-level\n```\n\nMonk sets `safe` to `true` by default.\n\n### Query debugging\n\nIf you wish to see what queries `monk` passes to the driver, simply leverage\n[debug](http://github.com/visionmedia/debug):\n\n```bash\nDEBUG=\"monk:queries\"\n```\n\nTo see all debugging output:\n\n```bash\nDEBUG=\"monk:*\"\n```\n\n## Contributors\n\n- [Guillermo Rauch](http://github.com/rauchg)\n- [Travis Jeffery](http://github.com/travisjeffery)\n\n## License\n\n(The MIT License)\n\nCopyright (c) 2012 Guillermo Rauch &lt;guillermo@learnboost.com&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
www/node_modules/monk/node_modules/mongodb/package.json:  "readme": "## MongoDB Node.JS Driver\n \n| what          | where                                          |\n|---------------|------------------------------------------------|\n| documentation | http://mongodb.github.io/node-mongodb-native/  |\n| apidoc        | http://mongodb.github.io/node-mongodb-native/  |\n| source        | https://github.com/mongodb/node-mongodb-native |\n| mongodb       | http://www.mongodb.org/                        |\n\n### Blogs of Engineers involved in the driver\n- Christian Kvalheim [@christkv](https://twitter.com/christkv) <http://christiankvalheim.com>\n- Valeri Karpov [@code_barbarian](https://twitter.com/code_barbarian) <http://thecodebarbarian.wordpress.com/>\n\n### Bugs / Feature Requests\n\nThink youâ€™ve found a bug? Want to see a new feature in node-mongodb-native? Please open a\ncase in our issue management tool, JIRA:\n\n- Create an account and login <https://jira.mongodb.org>.\n- Navigate to the NODE project <https://jira.mongodb.org/browse/NODE>.\n- Click **Create Issue** - Please provide as much information as possible about the issue type and how to reproduce it.\n\nBug reports in JIRA for all driver projects (i.e. NODE, PYTHON, CSHARP, JAVA) and the\nCore Server (i.e. SERVER) project are **public**.\n\n### Questions and Bug Reports\n\n * mailing list: https://groups.google.com/forum/#!forum/node-mongodb-native\n * jira: http://jira.mongodb.org/\n\n### Change Log\n\nhttp://jira.mongodb.org/browse/NODE\n\n## Install\n\nTo install the most recent release from npm, run:\n\n    npm install mongodb\n\nThat may give you a warning telling you that bugs['web'] should be bugs['url'], it would be safe to ignore it (this has been fixed in the development version)\n\nTo install the latest from the repository, run::\n\n    npm install path/to/node-mongodb-native\n\n## Live Examples\n<a href=\"https://runnable.com/node-mongodb-native\" target=\"_blank\"><img src=\"https://runnable.com/external/styles/assets/runnablebtn.png\" style=\"width:67px;height:25px;\"></a>\n\n## Introduction\n\nThis is a node.js driver for MongoDB. It's a port (or close to a port) of the library for ruby at http://github.com/mongodb/mongo-ruby-driver/.\n\nA simple example of inserting a document.\n\n```javascript\n  var MongoClient = require('mongodb').MongoClient\n    , format = require('util').format;\n\n  MongoClient.connect('mongodb://127.0.0.1:27017/test', function(err, db) {\n    if(err) throw err;\n\n    var collection = db.collection('test_insert');\n    collection.insert({a:2}, function(err, docs) {\n      \n      collection.count(function(err, count) {\n        console.log(format(\"count = %s\", count));\n      });\n\n      // Locate all the entries using find\n      collection.find().toArray(function(err, results) {\n        console.dir(results);\n        // Let's close the db\n        db.close();\n      });\n    });\n  })\n```\n\n## Data types\n\nTo store and retrieve the non-JSON MongoDb primitives ([ObjectID](http://www.mongodb.org/display/DOCS/Object+IDs), Long, Binary, [Timestamp](http://www.mongodb.org/display/DOCS/Timestamp+data+type), [DBRef](http://www.mongodb.org/display/DOCS/Database+References#DatabaseReferences-DBRef), Code).\n\nIn particular, every document has a unique `_id` which can be almost any type, and by default a 12-byte ObjectID is created. ObjectIDs can be represented as 24-digit hexadecimal strings, but you must convert the string back into an ObjectID before you can use it in the database. For example:\n\n```javascript\n  // Get the objectID type\n  var ObjectID = require('mongodb').ObjectID;\n\n  var idString = '4e4e1638c85e808431000003';\n  collection.findOne({_id: new ObjectID(idString)}, console.log)  // ok\n  collection.findOne({_id: idString}, console.log)  // wrong! callback gets undefined\n```\n\nHere are the constructors the non-Javascript BSON primitive types:\n\n```javascript\n  // Fetch the library\n  var mongo = require('mongodb');\n  // Create new instances of BSON types\n  new mongo.Long(numberString)\n  new mongo.ObjectID(hexString)\n  new mongo.Timestamp()  // the actual unique number is generated on insert.\n  new mongo.DBRef(collectionName, id, dbName)\n  new mongo.Binary(buffer)  // takes a string or Buffer\n  new mongo.Code(code, [context])\n  new mongo.Symbol(string)\n  new mongo.MinKey()\n  new mongo.MaxKey()\n  new mongo.Double(number)\t// Force double storage\n```\n\n### The C/C++ bson parser/serializer\n\nIf you are running a version of this library has the C/C++ parser compiled, to enable the driver to use the C/C++ bson parser pass it the option native_parser:true like below\n\n```javascript\n  // using native_parser:\n  MongoClient.connect('mongodb://127.0.0.1:27017/test'\n    , {db: {native_parser: true}}, function(err, db) {})\n```\n\nThe C++ parser uses the js objects both for serialization and deserialization.\n\n## GitHub information\n\nThe source code is available at http://github.com/mongodb/node-mongodb-native.\nYou can either clone the repository or download a tarball of the latest release.\n\nOnce you have the source you can test the driver by running\n\n    $ node test/runner.js -t functional\n\nin the main directory. You will need to have a mongo instance running on localhost for the integration tests to pass.\n\n## Examples\n\nFor examples look in the examples/ directory. You can execute the examples using node.\n\n    $ cd examples\n    $ node queries.js\n\n## GridStore\n\nThe GridStore class allows for storage of binary files in mongoDB using the mongoDB defined files and chunks collection definition.\n\nFor more information have a look at [Gridstore](https://github.com/mongodb/node-mongodb-native/blob/master/docs/gridfs.md)\n\n## Replicasets\n\nFor more information about how to connect to a replicaset have a look at the extensive documentation [Documentation](http://mongodb.github.com/node-mongodb-native/)\n\n### Primary Key Factories\n\nDefining your own primary key factory allows you to generate your own series of id's\n(this could f.ex be to use something like ISBN numbers). The generated the id needs to be a 12 byte long \"string\".\n\nSimple example below\n\n```javascript\n  var MongoClient = require('mongodb').MongoClient\n    , format = require('util').format;    \n\n  // Custom factory (need to provide a 12 byte array);\n  CustomPKFactory = function() {}\n  CustomPKFactory.prototype = new Object();\n  CustomPKFactory.createPk = function() {\n    return new ObjectID(\"aaaaaaaaaaaa\");\n  }\n\n  MongoClient.connect('mongodb://127.0.0.1:27017/test', {'pkFactory':CustomPKFactory}, function(err, db) {\n    if(err) throw err;\n\n    db.dropDatabase(function(err, done) {\n      \n      db.createCollection('test_custom_key', function(err, collection) {\n        \n        collection.insert({'a':1}, function(err, docs) {\n          \n          collection.find({'_id':new ObjectID(\"aaaaaaaaaaaa\")}).toArray(function(err, items) {\n            console.dir(items);\n            // Let's close the db\n            db.close();\n          });\n        });\n      });\n    });\n  });\n```\n\n## Documentation\n\nIf this document doesn't answer your questions, see the source of\n[Collection](https://github.com/mongodb/node-mongodb-native/blob/master/lib/mongodb/collection.js)\nor [Cursor](https://github.com/mongodb/node-mongodb-native/blob/master/lib/mongodb/cursor.js),\nor the documentation at MongoDB for query and update formats.\n\n### Find\n\nThe find method is actually a factory method to create\nCursor objects. A Cursor lazily uses the connection the first time\nyou call `nextObject`, `each`, or `toArray`.\n\nThe basic operation on a cursor is the `nextObject` method\nthat fetches the next matching document from the database. The convenience\nmethods `each` and `toArray` call `nextObject` until the cursor is exhausted.\n\nSignatures:\n\n```javascript\n  var cursor = collection.find(query, [fields], options);\n  cursor.sort(fields).limit(n).skip(m).\n\n  cursor.nextObject(function(err, doc) {});\n  cursor.each(function(err, doc) {});\n  cursor.toArray(function(err, docs) {});\n\n  cursor.rewind()  // reset the cursor to its initial state.\n```\n\nUseful chainable methods of cursor. These can optionally be options of `find` instead of method calls:\n\n  * `.limit(n).skip(m)` to control paging.\n  * `.sort(fields)` Order by the given fields. There are several equivalent syntaxes:\n  * `.sort({field1: -1, field2: 1})` descending by field1, then ascending by field2.\n  * `.sort([['field1', 'desc'], ['field2', 'asc']])` same as above\n  * `.sort([['field1', 'desc'], 'field2'])` same as above\n  * `.sort('field1')` ascending by field1\n\nOther options of `find`:\n\n* `fields` the fields to fetch (to avoid transferring the entire document)\n* `tailable` if true, makes the cursor [tailable](http://www.mongodb.org/display/DOCS/Tailable+Cursors).\n* `batchSize` The number of the subset of results to request the database\nto return for every request. This should initially be greater than 1 otherwise\nthe database will automatically close the cursor. The batch size can be set to 1\nwith `batchSize(n, function(err){})` after performing the initial query to the database.\n* `hint` See [Optimization: hint](http://www.mongodb.org/display/DOCS/Optimization#Optimization-Hint).\n* `explain` turns this into an explain query. You can also call\n`explain()` on any cursor to fetch the explanation.\n* `snapshot` prevents documents that are updated while the query is active\nfrom being returned multiple times. See more\n[details about query snapshots](http://www.mongodb.org/display/DOCS/How+to+do+Snapshotted+Queries+in+the+Mongo+Database).\n* `timeout` if false, asks MongoDb not to time out this cursor after an\ninactivity period.\n\nFor information on how to create queries, see the\n[MongoDB section on querying](http://www.mongodb.org/display/DOCS/Querying).\n\n```javascript\n  var MongoClient = require('mongodb').MongoClient\n    , format = require('util').format;    \n\n  MongoClient.connect('mongodb://127.0.0.1:27017/test', function(err, db) {\n    if(err) throw err;\n\n    var collection = db\n      .collection('test')\n      .find({})\n      .limit(10)\n      .toArray(function(err, docs) {\n        console.dir(docs);\n    });\n  });\n```\n\n### Insert\n\nSignature:\n\n```javascript\n  collection.insert(docs, options, [callback]);\n```\n\nwhere `docs` can be a single document or an array of documents.\n\nUseful options:\n\n* `w:1` Should always set if you have a callback.\n\nSee also: [MongoDB docs for insert](http://www.mongodb.org/display/DOCS/Inserting).\n\n```javascript\n  var MongoClient = require('mongodb').MongoClient\n    , format = require('util').format;    \n\n  MongoClient.connect('mongodb://127.0.0.1:27017/test', function(err, db) {\n    if(err) throw err;\n    \n    db.collection('test').insert({hello: 'world'}, {w:1}, function(err, objects) {\n      if (err) console.warn(err.message);\n      if (err && err.message.indexOf('E11000 ') !== -1) {\n        // this _id was already inserted in the database\n      }\n    });\n  });\n```\n\nNote that there's no reason to pass a callback to the insert or update commands\nunless you use the `w:1` option. If you don't specify `w:1`, then\nyour callback will be called immediately.\n\n### Update: update and insert (upsert)\n\nThe update operation will update the first document that matches your query\n(or all documents that match if you use `multi:true`).\nIf `w:1`, `upsert` is not set, and no documents match, your callback will return 0 documents updated.\n\nSee the [MongoDB docs](http://www.mongodb.org/display/DOCS/Updating) for\nthe modifier (`$inc`, `$set`, `$push`, etc.) formats.\n\nSignature:\n\n```javascript\n  collection.update(criteria, objNew, options, [callback]);\n```\n\nUseful options:\n\n* `w:1` Should always set if you have a callback.\n* `multi:true` If set, all matching documents are updated, not just the first.\n* `upsert:true` Atomically inserts the document if no documents matched.\n\nExample for `update`:\n\n```javascript\n  var MongoClient = require('mongodb').MongoClient\n    , format = require('util').format;    \n\n  MongoClient.connect('mongodb://127.0.0.1:27017/test', function(err, db) {\n    if(err) throw err;\n\n    db.collection('test').update({hi: 'here'}, {$set: {hi: 'there'}}, {w:1}, function(err) {\n      if (err) console.warn(err.message);\n      else console.log('successfully updated');\n    });\n  });\n```\n\n### Find and modify\n\n`findAndModify` is like `update`, but it also gives the updated document to\nyour callback. But there are a few key differences between findAndModify and\nupdate:\n\n  1. The signatures differ.\n  2. You can only findAndModify a single item, not multiple items.\n\nSignature:\n\n```javascript\n    collection.findAndModify(query, sort, update, options, callback)\n```\n\nThe sort parameter is used to specify which object to operate on, if more than\none document matches. It takes the same format as the cursor sort (see\nConnection.find above).\n\nSee the\n[MongoDB docs for findAndModify](http://www.mongodb.org/display/DOCS/findAndModify+Command)\nfor more details.\n\nUseful options:\n\n* `remove:true` set to a true to remove the object before returning\n* `new:true` set to true if you want to return the modified object rather than the original. Ignored for remove.\n* `upsert:true` Atomically inserts the document if no documents matched.\n\nExample for `findAndModify`:\n\n```javascript\n  var MongoClient = require('mongodb').MongoClient\n    , format = require('util').format;    \n\n  MongoClient.connect('mongodb://127.0.0.1:27017/test', function(err, db) {\n    if(err) throw err;\n    db.collection('test').findAndModify({hello: 'world'}, [['_id','asc']], {$set: {hi: 'there'}}, {}, function(err, object) {\n      if (err) console.warn(err.message);\n      else console.dir(object);  // undefined if no matching object exists.\n    });\n  });\n```\n\n### Save\n\nThe `save` method is a shorthand for upsert if the document contains an\n`_id`, or an insert if there is no `_id`.\n\n## Release Notes\n\nSee HISTORY\n\n## Credits\n\n1. [10gen](http://github.com/mongodb/mongo-ruby-driver/)\n2. [Google Closure Library](http://code.google.com/closure/library/)\n3. [Jonas Raoni Soares Silva](http://jsfromhell.com/classes/binary-parser)\n\n## Contributors\n\nAaron Heckmann, Christoph Pojer, Pau Ramon Revilla, Nathan White, Emmerman, Seth LaForge, Boris Filipov, Stefan SchÃ¤rmeli, Tedde Lundgren, renctan, Sergey Ukustov, Ciaran Jessup, kuno, srimonti, Erik Abele, Pratik Daga, Slobodan Utvic, Kristina Chodorow, Yonathan Randolph, Brian Noguchi, Sam Epstein, James Harrison Fisher, Vladimir Dronnikov, Ben Hockey, Henrik Johansson, Simon Weare, Alex Gorbatchev, Shimon Doodkin, Kyle Mueller, Eran Hammer-Lahav, Marcin Ciszak, FranÃ§ois de Metz, Vinay Pulim, nstielau, Adam Wiggins, entrinzikyl, Jeremy Selier, Ian Millington, Public Keating, andrewjstone, Christopher Stott, Corey Jewett, brettkiefer, Rob Holland, Senmiao Liu, heroic, gitfy\n\n## License\n\n Copyright 2009 - 2013 MongoDb Inc.\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n\n",
www/node_modules/monk/node_modules/mongodb/HISTORY:0.9.9.8 2012-04-12
www/node_modules/monk/node_modules/mongodb/HISTORY:0.9.9.7 2012-03-16
www/node_modules/monk/node_modules/mongodb/HISTORY:0.9.9.6 2012-03-12
www/node_modules/monk/node_modules/mongodb/HISTORY:0.9.9.5 2012-03-07
www/node_modules/monk/node_modules/mongodb/HISTORY:0.9.9.4 2012-02-26
www/node_modules/monk/node_modules/mongodb/HISTORY:0.9.9.3 2012-02-23
www/node_modules/monk/node_modules/mongodb/HISTORY:0.9.9.2 2012-02-17
www/node_modules/monk/node_modules/mongodb/HISTORY:0.9.9.1 2012-02-15
www/node_modules/monk/node_modules/mongodb/HISTORY:0.9.7.3-5 2012-01-04
www/node_modules/monk/node_modules/mongodb/HISTORY:0.9.7.3-4 2012-01-04
www/node_modules/monk/node_modules/mongodb/HISTORY:0.9.7.3-3 2012-01-04
www/node_modules/monk/node_modules/mongodb/HISTORY:0.9.7.3-2 2012-01-02
www/node_modules/monk/node_modules/mongodb/HISTORY:0.9.7.3-1 2012-01-02
www/node_modules/monk/node_modules/mongodb/HISTORY:0.9.7.3 2011-12-30
www/node_modules/monk/node_modules/mongodb/HISTORY:0.9.7.2-5 2011-12-22
www/node_modules/monk/node_modules/mongodb/HISTORY:0.9.7.2-4 2011-12-21
www/node_modules/monk/node_modules/mongodb/HISTORY:0.9.7.2-3 2011-12-18
www/node_modules/monk/node_modules/mongodb/HISTORY:0.9.7.2-2 2011-12-16
www/node_modules/monk/node_modules/mongodb/HISTORY:0.9.7.2-1 2011-12-16
www/node_modules/monk/node_modules/mongodb/HISTORY:0.9.7.2 2011-12-15
www/node_modules/monk/node_modules/mongodb/HISTORY:0.9.7.1-4 2011-11-27
www/node_modules/monk/node_modules/mongodb/HISTORY:0.9.7.1-3 2011-11-27
www/node_modules/monk/node_modules/mongodb/HISTORY:0.9.7.1-2 2011-11-27
www/node_modules/monk/node_modules/mongodb/HISTORY:0.9.7.1-1 2011-11-27
www/node_modules/monk/node_modules/mongodb/HISTORY:0.9.7.1 2011-11-24
www/node_modules/monk/node_modules/mongodb/Readme.md:  MongoClient.connect('mongodb://127.0.0.1:27017/test', function(err, db) {
www/node_modules/monk/node_modules/mongodb/Readme.md:  MongoClient.connect('mongodb://127.0.0.1:27017/test'
www/node_modules/monk/node_modules/mongodb/Readme.md:  MongoClient.connect('mongodb://127.0.0.1:27017/test', {'pkFactory':CustomPKFactory}, function(err, db) {
www/node_modules/monk/node_modules/mongodb/Readme.md:  MongoClient.connect('mongodb://127.0.0.1:27017/test', function(err, db) {
www/node_modules/monk/node_modules/mongodb/Readme.md:  MongoClient.connect('mongodb://127.0.0.1:27017/test', function(err, db) {
www/node_modules/monk/node_modules/mongodb/Readme.md:  MongoClient.connect('mongodb://127.0.0.1:27017/test', function(err, db) {
www/node_modules/monk/node_modules/mongodb/Readme.md:  MongoClient.connect('mongodb://127.0.0.1:27017/test', function(err, db) {
www/node_modules/monk/node_modules/mongoskin/examples/replSetBenchmark.js:    '127.0.0.1:27110/?auto_reconnect',
www/node_modules/monk/node_modules/mongoskin/examples/replSetBenchmark.js:    '127.0.0.1:27111/?auto_reconnect'
www/node_modules/monk/test/collection.test.js:    db = monk('127.0.0.1/monk');
www/node_modules/monk/test/monk.test.js:      monk('127.0.0.1/monk-test', done);
www/node_modules/monk/test/monk.test.js:      monk(['127.0.0.1/monk-test', 'localhost/monk-test'], done);
www/node_modules/monk/test/monk.test.js:      monk('127.0.0.1,localhost/monk-test', done);
www/node_modules/monk/test/monk.test.js:      var db = monk('127.0.0.1/monk-test', function () {
www/node_modules/monk/test/monk.test.js:    var db = monk('127.0.0.1/monk-test');
www/node_modules/monk/test/monk.test.js:    var db = monk('127.0.0.1/monk-test');
www/node_modules/monk/README.md:var db = require('monk')('localhost/mydb,192.168.1.1')
www/node_modules/mongodb/t1.js://     var connection = "mongodb://127.0.0.1:27017/test_db";
www/node_modules/mongodb/node_modules/es6-promise/dist/test/mocha.js: * http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.4.6927
www/node_modules/mongodb/node_modules/es6-promise/dist/test/browserify.js:describe("2.1.2.1: When fulfilled, a promise: must not transition to any other state.", function () {
www/node_modules/mongodb/node_modules/es6-promise/dist/test/browserify.js:describe("2.1.3.1: When rejected, a promise: must not transition to any other state.", function () {
www/node_modules/mongodb/node_modules/es6-promise/dist/test/browserify.js:    describe("2.2.1.1: If `onFulfilled` is not a function, it must be ignored.", function () {
www/node_modules/mongodb/node_modules/es6-promise/dist/test/browserify.js:    describe("2.2.1.2: If `onRejected` is not a function, it must be ignored.", function () {
www/node_modules/mongodb/node_modules/es6-promise/dist/test/browserify.js:    describe("2.2.2.1: it must be called after `promise` is fulfilled, with `promise`â€™s fulfillment value as its " +
www/node_modules/mongodb/node_modules/es6-promise/dist/test/browserify.js:    describe("2.2.2.2: it must not be called before `promise` is fulfilled", function () {
www/node_modules/mongodb/node_modules/es6-promise/dist/test/browserify.js:    describe("2.2.2.3: it must not be called more than once.", function () {
www/node_modules/mongodb/node_modules/es6-promise/dist/test/browserify.js:    describe("2.2.3.1: it must be called after `promise` is rejected, with `promise`â€™s rejection reason as its " +
www/node_modules/mongodb/node_modules/es6-promise/dist/test/browserify.js:    describe("2.2.3.2: it must not be called before `promise` is rejected", function () {
www/node_modules/mongodb/node_modules/es6-promise/dist/test/browserify.js:    describe("2.2.3.3: it must not be called more than once.", function () {
www/node_modules/mongodb/node_modules/es6-promise/dist/test/browserify.js:    describe("2.2.6.1: If/when `promise` is fulfilled, all respective `onFulfilled` callbacks must execute in the " +
www/node_modules/mongodb/node_modules/es6-promise/dist/test/browserify.js:    describe("2.2.6.2: If/when `promise` is rejected, all respective `onRejected` callbacks must execute in the " +
www/node_modules/mongodb/node_modules/es6-promise/dist/test/browserify.js:    describe("2.2.7.1: If either `onFulfilled` or `onRejected` returns a value `x`, run the Promise Resolution " +
www/node_modules/mongodb/node_modules/es6-promise/dist/test/browserify.js:    describe("2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected " +
www/node_modules/mongodb/node_modules/es6-promise/dist/test/browserify.js:    describe("2.2.7.3: If `onFulfilled` is not a function and `promise1` is fulfilled, `promise2` must be fulfilled " +
www/node_modules/mongodb/node_modules/es6-promise/dist/test/browserify.js:    describe("2.2.7.4: If `onRejected` is not a function and `promise1` is rejected, `promise2` must be rejected " +
www/node_modules/mongodb/node_modules/es6-promise/dist/test/browserify.js:    describe("2.3.2.1: If `x` is pending, `promise` must remain pending until `x` is fulfilled or rejected.",
www/node_modules/mongodb/node_modules/es6-promise/dist/test/browserify.js:    describe("2.3.2.2: If/when `x` is fulfilled, fulfill `promise` with the same value.", function () {
www/node_modules/mongodb/node_modules/es6-promise/dist/test/browserify.js:    describe("2.3.2.3: If/when `x` is rejected, reject `promise` with the same reason.", function () {
www/node_modules/mongodb/node_modules/es6-promise/dist/test/browserify.js:    describe("2.3.3.1: Let `then` be `x.then`", function () {
www/node_modules/mongodb/node_modules/es6-promise/dist/test/browserify.js:    describe("2.3.3.2: If retrieving the property `x.then` results in a thrown exception `e`, reject `promise` with " +
www/node_modules/mongodb/node_modules/es6-promise/dist/test/browserify.js:    describe("2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and " +
www/node_modules/mongodb/node_modules/es6-promise/dist/test/browserify.js:        describe("2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)`",
www/node_modules/mongodb/node_modules/es6-promise/dist/test/browserify.js:        describe("2.3.3.3.2: If/when `rejectPromise` is called with reason `r`, reject `promise` with `r`",
www/node_modules/mongodb/node_modules/es6-promise/dist/test/browserify.js:        describe("2.3.3.3.3: If both `resolvePromise` and `rejectPromise` are called, or multiple calls to the same " +
www/node_modules/mongodb/node_modules/es6-promise/dist/test/browserify.js:        describe("2.3.3.3.4: If calling `then` throws an exception `e`,", function () {
www/node_modules/mongodb/node_modules/es6-promise/dist/test/browserify.js:            describe("2.3.3.3.4.1: If `resolvePromise` or `rejectPromise` have been called, ignore it.", function () {
www/node_modules/mongodb/node_modules/es6-promise/dist/test/browserify.js:            describe("2.3.3.3.4.2: Otherwise, reject `promise` with `e` as the reason.", function () {
www/node_modules/mongodb/node_modules/es6-promise/dist/test/browserify.js:    describe("2.3.3.4: If `then` is not a function, fulfill promise with `x`", function () {
www/node_modules/mongodb/node_modules/es6-promise/dist/test/browserify.js:          specify("2.3.4.1 If resolvePromise or rejectPromise have been called, ignore it.", function(done){
www/node_modules/mongodb/node_modules/es6-promise/dist/test/browserify.js:          specify("2.3.4.2 Otherwise, reject promise with e as the reason.", function(done) {
www/node_modules/mongodb/node_modules/es6-promise/dist/test/json3.js:                // specified in ES 5.1 section 15.9.5.44. See section 15.9.1.15
www/node_modules/mongodb/node_modules/es6-promise/dist/test/json3.js:                  // 5.1 section 15.9.1.2). The formula `(A % B + B) % B` is used
www/node_modules/mongodb/node_modules/es6-promise/dist/test/json3.js:                  // decomposing the time within the day. See section 15.9.1.10.
www/node_modules/mongodb/HISTORY.md:0.9.9.8 2012-04-12
www/node_modules/mongodb/HISTORY.md:0.9.9.7 2012-03-16
www/node_modules/mongodb/HISTORY.md:0.9.9.6 2012-03-12
www/node_modules/mongodb/HISTORY.md:0.9.9.5 2012-03-07
www/node_modules/mongodb/HISTORY.md:0.9.9.4 2012-02-26
www/node_modules/mongodb/HISTORY.md:0.9.9.3 2012-02-23
www/node_modules/mongodb/HISTORY.md:0.9.9.2 2012-02-17
www/node_modules/mongodb/HISTORY.md:0.9.9.1 2012-02-15
www/node_modules/mongodb/HISTORY.md:0.9.7.3-5 2012-01-04
www/node_modules/mongodb/HISTORY.md:0.9.7.3-4 2012-01-04
www/node_modules/mongodb/HISTORY.md:0.9.7.3-3 2012-01-04
www/node_modules/mongodb/HISTORY.md:0.9.7.3-2 2012-01-02
www/node_modules/mongodb/HISTORY.md:0.9.7.3-1 2012-01-02
www/node_modules/mongodb/HISTORY.md:0.9.7.3 2011-12-30
www/node_modules/mongodb/HISTORY.md:0.9.7.2-5 2011-12-22
www/node_modules/mongodb/HISTORY.md:0.9.7.2-4 2011-12-21
www/node_modules/mongodb/HISTORY.md:0.9.7.2-3 2011-12-18
www/node_modules/mongodb/HISTORY.md:0.9.7.2-2 2011-12-16
www/node_modules/mongodb/HISTORY.md:0.9.7.2-1 2011-12-16
www/node_modules/mongodb/HISTORY.md:0.9.7.2 2011-12-15
www/node_modules/mongodb/HISTORY.md:0.9.7.1-4 2011-11-27
www/node_modules/mongodb/HISTORY.md:0.9.7.1-3 2011-11-27
www/node_modules/mongodb/HISTORY.md:0.9.7.1-2 2011-11-27
www/node_modules/mongodb/HISTORY.md:0.9.7.1-1 2011-11-27
www/node_modules/mongodb/HISTORY.md:0.9.7.1 2011-11-24
www/node_modules/serve-favicon/node_modules/etag/package.json:  "readme": "# etag\n\n[![NPM Version][npm-image]][npm-url]\n[![NPM Downloads][downloads-image]][downloads-url]\n[![Node.js Version][node-version-image]][node-version-url]\n[![Build Status][travis-image]][travis-url]\n[![Test Coverage][coveralls-image]][coveralls-url]\n\nCreate simple ETags\n\n## Installation\n\n```sh\n$ npm install etag\n```\n\n## API\n\n```js\nvar etag = require('etag')\n```\n\n### etag(entity, [options])\n\nGenerate a strong ETag for the given entity. This should be the complete\nbody of the entity. Strings, `Buffer`s, and `fs.Stats` are accepted. By\ndefault, a strong ETag is generated except for `fs.Stats`, which will\ngenerate a weak ETag (this can be overwritten by `options.weak`).\n\n```js\nres.setHeader('ETag', etag(body))\n```\n\n#### Options\n\n`etag` accepts these properties in the options object.\n\n##### weak\n\nSpecifies if the generated ETag will include the weak validator mark (that\nis, the leading `W/`). The actual entity tag is the same. The default value\nis `false`, unless the `entity` is `fs.Stats`, in which case it is `true`.\n\n## Testing\n\n```sh\n$ npm test\n```\n\n## Benchmark\n\n```bash\n$ npm run-script bench\n\n> etag@1.6.0 bench nodejs-etag\n> node benchmark/index.js\n\n  http_parser@1.0\n  node@0.10.33\n  v8@3.14.5.9\n  ares@1.9.0-DEV\n  uv@0.10.29\n  zlib@1.2.3\n  modules@11\n  openssl@1.0.1j\n\n> node benchmark/body0-100b.js\n\n  100B body\n\n  1 test completed.\n  2 tests completed.\n  3 tests completed.\n  4 tests completed.\n\n* buffer - strong x 289,198 ops/sec Â±1.09% (190 runs sampled)\n* buffer - weak   x 287,838 ops/sec Â±0.91% (189 runs sampled)\n* string - strong x 284,586 ops/sec Â±1.05% (192 runs sampled)\n* string - weak   x 287,439 ops/sec Â±0.82% (192 runs sampled)\n\n> node benchmark/body1-1kb.js\n\n  1KB body\n\n  1 test completed.\n  2 tests completed.\n  3 tests completed.\n  4 tests completed.\n\n* buffer - strong x 212,423 ops/sec Â±0.75% (193 runs sampled)\n* buffer - weak   x 211,871 ops/sec Â±0.74% (194 runs sampled)\n  string - strong x 205,291 ops/sec Â±0.86% (194 runs sampled)\n  string - weak   x 208,463 ops/sec Â±0.79% (192 runs sampled)\n\n> node benchmark/body2-5kb.js\n\n  5KB body\n\n  1 test completed.\n  2 tests completed.\n  3 tests completed.\n  4 tests completed.\n\n* buffer - strong x 92,901 ops/sec Â±0.58% (195 runs sampled)\n* buffer - weak   x 93,045 ops/sec Â±0.65% (192 runs sampled)\n  string - strong x 89,621 ops/sec Â±0.68% (194 runs sampled)\n  string - weak   x 90,070 ops/sec Â±0.70% (196 runs sampled)\n\n> node benchmark/body3-10kb.js\n\n  10KB body\n\n  1 test completed.\n  2 tests completed.\n  3 tests completed.\n  4 tests completed.\n\n* buffer - strong x 54,220 ops/sec Â±0.85% (192 runs sampled)\n* buffer - weak   x 54,069 ops/sec Â±0.83% (191 runs sampled)\n  string - strong x 53,078 ops/sec Â±0.53% (194 runs sampled)\n  string - weak   x 53,849 ops/sec Â±0.47% (197 runs sampled)\n\n> node benchmark/body4-100kb.js\n\n  100KB body\n\n  1 test completed.\n  2 tests completed.\n  3 tests completed.\n  4 tests completed.\n\n* buffer - strong x 6,673 ops/sec Â±0.15% (197 runs sampled)\n* buffer - weak   x 6,716 ops/sec Â±0.12% (198 runs sampled)\n  string - strong x 6,357 ops/sec Â±0.14% (197 runs sampled)\n  string - weak   x 6,344 ops/sec Â±0.21% (197 runs sampled)\n\n> node benchmark/stats.js\n\n  stats\n\n  1 test completed.\n  2 tests completed.\n  3 tests completed.\n  4 tests completed.\n\n* real - strong x 1,671,989 ops/sec Â±0.13% (197 runs sampled)\n* real - weak   x 1,681,297 ops/sec Â±0.12% (198 runs sampled)\n  fake - strong x   927,063 ops/sec Â±0.14% (198 runs sampled)\n  fake - weak   x   914,461 ops/sec Â±0.41% (191 runs sampled)\n```\n\n## License\n\n[MIT](LICENSE)\n\n[npm-image]: https://img.shields.io/npm/v/etag.svg\n[npm-url]: https://npmjs.org/package/etag\n[node-version-image]: https://img.shields.io/node/v/etag.svg\n[node-version-url]: http://nodejs.org/download/\n[travis-image]: https://img.shields.io/travis/jshttp/etag/master.svg\n[travis-url]: https://travis-ci.org/jshttp/etag\n[coveralls-image]: https://img.shields.io/coveralls/jshttp/etag/master.svg\n[coveralls-url]: https://coveralls.io/r/jshttp/etag?branch=master\n[downloads-image]: https://img.shields.io/npm/dm/etag.svg\n[downloads-url]: https://npmjs.org/package/etag\n",
www/node_modules/serve-favicon/node_modules/etag/README.md:  v8@3.14.5.9
www/node_modules/body-parser/node_modules/content-type/index.js: * RegExp to match *( ";" parameter ) in RFC 7231 sec 3.1.1.1
www/files/gnome_firmware_rel_notes.txt:Firmware version:	1.1.8.164461
tmp/resolv.conf.auto:nameserver 10.0.2.3
bin/config_generate:set network.loopback.ipaddr='127.0.0.1'
bin/config_generate:set network.loopback.netmask='255.0.0.0'
bin/config_generate:set network.$1.ipaddr='192.168.1.1'
bin/config_generate:set network.$1.netmask='255.255.255.0'
bin/config_generate:				set network.lan.ipaddr='192.168.1.1'
bin/config_generate:				set network.lan.netmask='255.255.255.0'
lib/netifd/dhcp.script:	proto_add_ipv4_address "$ip" "${subnet:-255.255.255.0}"
lib/netifd/dhcp.script:		proto_add_ipv4_route 0.0.0.0 0 "$i" "$ip"
lib/functions/network.sh:	__network_ifstatus "$1" "$2" ".route[@.target='0.0.0.0' && !@.table].nexthop" "" 1 && \
lib/functions/network.sh:		__network_ifstatus "$1" "$2" ".inactive.route[@.target='0.0.0.0' && !@.table].nexthop" "" 1
lib/functions/network.sh:network_find_wan() { __network_wan "$1" "0.0.0.0" "$2"; }
lib/functions/uci-defaults.sh:set network.loopback.ipaddr='127.0.0.1'
lib/functions/uci-defaults.sh:set network.loopback.netmask='255.0.0.0'
lib/functions/uci-defaults.sh:set network.lan.ipaddr='192.168.1.1'
lib/functions/uci-defaults.sh:set network.lan.netmask='255.255.255.0'
